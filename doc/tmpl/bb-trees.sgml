<!-- ##### SECTION Title ##### -->
Bounding boxes trees

<!-- ##### SECTION Short_Description ##### -->
implementation of axis-aligned bounding-box trees.

<!-- ##### SECTION Long_Description ##### -->
<para>
Axis-aligned bounding box trees can be used for intersection/collision detection using gts_bb_tree_traverse_overlapping(), or to compute the minimum distance between an object and a collection of others using gts_bb_tree_point_distance(), gts_bb_tree_segment_distance(), gts_bb_tree_triangle_distance() or gts_bb_tree_surface_distance().
</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### MACRO GTS_BBOX_CLASS ##### -->
<para>
Casts @klass to #GtsBBoxClass.
</para>

@klass: a descendant of #GtsBBoxClass.


<!-- ##### MACRO GTS_BBOX ##### -->
<para>
Casts @obj to #GtsBBox.
</para>

@obj: a descendant of #GtsBBox.


<!-- ##### MACRO GTS_IS_BBOX ##### -->
<para>
Evaluates to %TRUE if @obj is a #GtsBBox, %FALSE otherwise.
</para>

@obj: a pointer to test.


<!-- ##### STRUCT GtsBBoxClass ##### -->
<para>
The bounding box class derived from #GtsObjectClass.
</para>

@parent_class: 

<!-- ##### STRUCT GtsBBox ##### -->
<para>
The bounding box structure.
</para>

@object: Parent object.
@bounded: Bounded object.
@x1: x coordinate of the lower-left front corner.
@y1: y coordinate of the lower-left front corner.
@z1: z coordinate of the lower-left front corner.
@x2: x coordinate of the upper-right back corner.
@y2: y coordinate of the upper-right back corner.
@z2: z coordinate of the upper-right back corner.

<!-- ##### FUNCTION gts_bbox_class ##### -->
<para>

</para>

@Returns: 


<!-- ##### FUNCTION gts_bbox_new ##### -->
<para>

</para>

@klass: 
@bounded: 
@x1: 
@y1: 
@z1: 
@x2: 
@y2: 
@z2: 
@Returns: 


<!-- ##### FUNCTION gts_bbox_set ##### -->
<para>

</para>

@bbox: 
@bounded: 
@x1: 
@y1: 
@z1: 
@x2: 
@y2: 
@z2: 


<!-- ##### FUNCTION gts_bbox_segment ##### -->
<para>

</para>

@klass: 
@s: 
@Returns: 


<!-- ##### FUNCTION gts_bbox_triangle ##### -->
<para>

</para>

@klass: 
@t: 
@Returns: 


<!-- ##### FUNCTION gts_bbox_surface ##### -->
<para>

</para>

@klass: 
@surface: 
@Returns: 


<!-- ##### FUNCTION gts_bbox_points ##### -->
<para>

</para>

@klass: 
@points: 
@Returns: 


<!-- ##### FUNCTION gts_bbox_bboxes ##### -->
<para>

</para>

@klass: 
@bboxes: 
@Returns: 


<!-- ##### FUNCTION gts_bbox_draw ##### -->
<para>

</para>

@bb: 
@fptr: 


<!-- ##### MACRO gts_bbox_point_is_inside ##### -->
<para>
Evaluates to %TRUE if @p is inside (or on the boundary) of @bbox, %FALSE otherwise.
</para>

@bbox: a #GtsBBox.
@p: a #GtsPoint.


<!-- ##### FUNCTION gts_bboxes_are_overlapping ##### -->
<para>

</para>

@bb1: 
@bb2: 
@Returns: 
<!-- # Unused Parameters # -->
@s1: 
@s2: 


<!-- ##### FUNCTION gts_bbox_diagonal2 ##### -->
<para>

</para>

@bb: 
@Returns: 


<!-- ##### FUNCTION gts_bbox_point_distance2 ##### -->
<para>

</para>

@bb: 
@p: 
@min: 
@max: 


<!-- ##### FUNCTION gts_bbox_is_stabbed ##### -->
<para>

</para>

@bb: 
@p: 
@Returns: 


<!-- ##### USER_FUNCTION GtsBBTreeTraverseFunc ##### -->
<para>
User function called for each pair of overlapping bounding boxes. See 
gts_bb_tree_traverse_overlapping().
</para>

@bb1: a #GtsBBox.
@bb2: another #GtsBBox.
@data: user data passed to the function.


<!-- ##### FUNCTION gts_bb_tree_new ##### -->
<para>

</para>

@bboxes: 
@Returns: 


<!-- ##### FUNCTION gts_bb_tree_surface ##### -->
<para>

</para>

@s: 
@Returns: 


<!-- ##### FUNCTION gts_bb_tree_overlap ##### -->
<para>

</para>

@tree: 
@bbox: 
@Returns: 


<!-- ##### FUNCTION gts_bb_tree_is_overlapping ##### -->
<para>

</para>

@tree: 
@bbox: 
@Returns: 


<!-- ##### FUNCTION gts_bb_tree_traverse_overlapping ##### -->
<para>

</para>

@tree1: 
@tree2: 
@func: 
@data: 
<!-- # Unused Parameters # -->
@Param3: 


<!-- ##### FUNCTION gts_bb_tree_draw ##### -->
<para>

</para>

@tree: 
@depth: 
@fptr: 


<!-- ##### FUNCTION gts_bb_tree_destroy ##### -->
<para>

</para>

@tree: 
@free_leaves: 


<!-- ##### USER_FUNCTION GtsBBoxDistFunc ##### -->
<para>
User function returning the (minimum) distance between the object defined by @bounded and point @p.
</para>

@p: a #GtsPoint.
@bounded: an object bounded by a #GtsBBox.
@Returns: the distance between @p and @bounded.


<!-- ##### USER_FUNCTION GtsBBoxClosestFunc ##### -->
<para>
User function returning a #GtsPoint belonging to the object defined by @bounded and closest to @p.
</para>

@p: a #GtsPoint.
@bounded: an object bounded by a #GtsBBox.
@Returns: a #GtsPoint.


<!-- ##### FUNCTION gts_bb_tree_point_distance ##### -->
<para>

</para>

@tree: 
@p: 
@distance: 
@bbox: 
@Returns: 


<!-- ##### FUNCTION gts_bb_tree_point_closest ##### -->
<para>

</para>

@tree: 
@p: 
@closest: 
@distance: 
@Returns: 


<!-- ##### FUNCTION gts_bb_tree_segment_distance ##### -->
<para>

</para>

@tree: 
@s: 
@distance: 
@delta: 
@range: 


<!-- ##### FUNCTION gts_bb_tree_triangle_distance ##### -->
<para>

</para>

@tree: 
@t: 
@distance: 
@delta: 
@range: 


<!-- ##### FUNCTION gts_bb_tree_point_closest_bboxes ##### -->
<para>

</para>

@tree: 
@p: 
@Returns: 


<!-- ##### FUNCTION gts_bb_tree_surface_boundary_distance ##### -->
<para>

</para>

@tree: 
@s: 
@distance: 
@delta: 
@range: 


<!-- ##### FUNCTION gts_bb_tree_surface_distance ##### -->
<para>

</para>

@tree: 
@s: 
@distance: 
@delta: 
@range: 


<!-- ##### FUNCTION gts_bb_tree_stabbed ##### -->
<para>

</para>

@tree: 
@p: 
@Returns: 


